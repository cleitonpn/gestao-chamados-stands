import {
  collection,
  doc,
  getDocs,
  updateDoc,
  query,
  where,
  orderBy,
  onSnapshot,
  writeBatch,
  deleteDoc,
  addDoc
} from 'firebase/firestore';
import { db } from '../config/firebase';
import pushNotificationService from './pushNotificationService';
import fcmBackendService from './fcmBackendService';

class NotificationService {

  // üîî M√âTODO PRIVADO PARA CRIAR NOTIFICA√á√ïES EM LOTE COM PUSH
  async #sendNotificationToUsers(userIds, notificationData) {
    if (!userIds || userIds.length === 0) return;
    const uniqueUserIds = [...new Set(userIds)];
    
    // 1. Salvar notifica√ß√µes no Firestore (m√©todo original)
    const batch = writeBatch(db);
    uniqueUserIds.forEach(userId => {
      const notificationRef = doc(collection(db, 'notifications'));
      batch.set(notificationRef, {
        ...notificationData,
        userId: userId,
        lida: false,
        criadoEm: new Date(),
      });
    });
    
    await batch.commit();
    console.log(`üîî Notifica√ß√£o do tipo "${notificationData.tipo}" enviada para ${uniqueUserIds.length} usu√°rios.`);

    // 2. üöÄ NOVO: Enviar notifica√ß√µes push
    try {
      const pushData = {
        title: this.#getPushTitle(notificationData.tipo),
        body: this.#getPushBody(notificationData),
        type: notificationData.tipo,
        ticketId: notificationData.chamadoId,
        data: {
          chamadoId: notificationData.chamadoId,
          tipo: notificationData.tipo,
          titulo: notificationData.titulo,
          conteudo: notificationData.conteudo
        }
      };

      await fcmBackendService.sendNotificationToMultipleUsers(uniqueUserIds, pushData);
      console.log('üîî Notifica√ß√µes push enviadas com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√µes push:', error);
      // N√£o falhar se push n√£o funcionar - notifica√ß√£o no app ainda funciona
    }
  }

  // üéØ GERAR T√çTULO DA NOTIFICA√á√ÉO PUSH
  #getPushTitle(tipo) {
    const titles = {
      'novo_chamado': 'üìã Novo Chamado',
      'nova_mensagem': 'üí¨ Nova Mensagem',
      'escalacao_area': 'üîÑ Chamado Escalado',
      'escalacao_gerencia': 'üë®‚Äçüíº Escala√ß√£o Gerencial',
      'mudanca_status': 'üîÑ Status Atualizado',
      'novo_evento': 'üìÖ Novo Evento'
    };
    return titles[tipo] || 'üîî Notifica√ß√£o';
  }

  // üìù GERAR CORPO DA NOTIFICA√á√ÉO PUSH
  #getPushBody(notificationData) {
    const { tipo, titulo, conteudo, remetenteNome } = notificationData;
    
    switch (tipo) {
      case 'novo_chamado':
        return `${titulo} - Novo chamado criado`;
      case 'nova_mensagem':
        return `${remetenteNome}: ${conteudo?.substring(0, 50)}...`;
      case 'escalacao_area':
        return `${titulo} - Escalado para sua √°rea`;
      case 'escalacao_gerencia':
        return `${titulo} - Requer aprova√ß√£o gerencial`;
      case 'mudanca_status':
        return `${titulo} - Status foi atualizado`;
      case 'novo_evento':
        return `${titulo} - Novo evento cadastrado`;
      default:
        return conteudo || 'Voc√™ tem uma nova notifica√ß√£o';
    }
  }

  // Busca usu√°rios por √°rea
  async #getUsersByArea(area) {
    const users = [];
    if (!area) return users;
    const q = query(collection(db, "usuarios"), where("area", "==", area));
    const querySnapshot = await getDocs(q);
    querySnapshot.forEach((doc) => {
      users.push({ id: doc.id, ...doc.data() });
    });
    return users;
  }

  // üí¨ NOTIFICA SOBRE NOVA MENSAGEM (ATUALIZADO COM PUSH)
  async notifyNewMessage(chamadoId, chamadoData, messageData, senderId) {
    try {
      console.log('üí¨ Enviando notifica√ß√£o de nova mensagem...');
      
      const recipients = await this.#getMessageRecipients(chamadoData, senderId);
      
      const notificationData = {
        tipo: 'nova_mensagem',
        titulo: `Nova mensagem em: ${chamadoData.titulo}`,
        conteudo: messageData.conteudo?.substring(0, 100) || 'Nova mensagem no chamado',
        chamadoId: chamadoId,
        remetenteId: senderId,
        remetenteNome: messageData.remetenteNome || 'Usu√°rio',
        metadata: {
          messageId: messageData.id,
          messageType: messageData.type || 'user_message'
        }
      };

      await this.#sendNotificationToUsers(recipients, notificationData);
      
      // üöÄ PUSH ESPEC√çFICO PARA MENSAGEM
      try {
        await fcmBackendService.notifyNewMessage(chamadoId, chamadoData, messageData, senderId);
      } catch (pushError) {
        console.error('‚ùå Erro espec√≠fico no push de mensagem:', pushError);
      }
      
      console.log('‚úÖ Notifica√ß√£o de nova mensagem enviada');
    } catch (error) {
      console.error('‚ùå Erro ao notificar nova mensagem:', error);
    }
  }

  // üìã NOTIFICA SOBRE NOVO CHAMADO (ATUALIZADO COM PUSH)
  async notifyNewTicket(chamadoId, chamadoData, creatorId) {
    try {
      console.log('üìã Enviando notifica√ß√£o de novo chamado...');
      
      const recipients = await this.#getTicketRecipients(chamadoData, creatorId);
      
      const notificationData = {
        tipo: 'novo_chamado',
        titulo: `Novo chamado: ${chamadoData.titulo}`,
        conteudo: `√Årea: ${chamadoData.area} | Tipo: ${chamadoData.tipo}`,
        chamadoId: chamadoId,
        criadoPor: creatorId,
        metadata: {
          area: chamadoData.area,
          tipo: chamadoData.tipo,
          prioridade: chamadoData.prioridade || 'normal'
        }
      };

      await this.#sendNotificationToUsers(recipients, notificationData);
      
      // üöÄ PUSH ESPEC√çFICO PARA NOVO CHAMADO
      try {
        await fcmBackendService.notifyNewTicket(chamadoId, chamadoData, creatorId);
      } catch (pushError) {
        console.error('‚ùå Erro espec√≠fico no push de novo chamado:', pushError);
      }
      
      console.log('‚úÖ Notifica√ß√£o de novo chamado enviada');
    } catch (error) {
      console.error('‚ùå Erro ao notificar novo chamado:', error);
    }
  }

  // üîÑ NOTIFICA SOBRE ESCALA√á√ÉO (ATUALIZADO COM PUSH)
  async notifyEscalation(chamadoId, chamadoData, targetAreaOrUserId, escalatorId, reason) {
    try {
      console.log('üîÑ Enviando notifica√ß√£o de escala√ß√£o...');
      
      const recipients = await this.#getEscalationRecipients(chamadoData, targetAreaOrUserId);
      
      const notificationData = {
        tipo: 'escalacao_area',
        titulo: `Chamado escalado: ${chamadoData.titulo}`,
        conteudo: `Motivo: ${reason}`,
        chamadoId: chamadoId,
        escaladoPor: escalatorId,
        metadata: {
          targetArea: targetAreaOrUserId,
          reason: reason,
          originalArea: chamadoData.area
        }
      };

      await this.#sendNotificationToUsers(recipients, notificationData);
      
      // üöÄ PUSH ESPEC√çFICO PARA ESCALA√á√ÉO
      try {
        await fcmBackendService.notifyEscalation(chamadoId, chamadoData, 'area', targetAreaOrUserId, escalatorId);
      } catch (pushError) {
        console.error('‚ùå Erro espec√≠fico no push de escala√ß√£o:', pushError);
      }
      
      console.log('‚úÖ Notifica√ß√£o de escala√ß√£o enviada');
    } catch (error) {
      console.error('‚ùå Erro ao notificar escala√ß√£o:', error);
    }
  }

  // üë®‚Äçüíº NOTIFICA SOBRE ESCALA√á√ÉO GERENCIAL (ATUALIZADO COM PUSH)
  async notifyManagementEscalation(chamadoId, chamadoData, managerId, escalatorId, reason) {
    try {
      console.log('üë®‚Äçüíº Enviando notifica√ß√£o de escala√ß√£o gerencial...');
      
      const recipients = [managerId];
      
      const notificationData = {
        tipo: 'escalacao_gerencia',
        titulo: `Escala√ß√£o gerencial: ${chamadoData.titulo}`,
        conteudo: `Motivo: ${reason}`,
        chamadoId: chamadoId,
        escaladoPor: escalatorId,
        gerenteResponsavel: managerId,
        metadata: {
          reason: reason,
          originalArea: chamadoData.area,
          requiresApproval: true
        }
      };

      await this.#sendNotificationToUsers(recipients, notificationData);
      
      // üöÄ PUSH ESPEC√çFICO PARA ESCALA√á√ÉO GERENCIAL
      try {
        await fcmBackendService.notifyEscalation(chamadoId, chamadoData, 'management', managerId, escalatorId);
      } catch (pushError) {
        console.error('‚ùå Erro espec√≠fico no push de escala√ß√£o gerencial:', pushError);
      }
      
      console.log('‚úÖ Notifica√ß√£o de escala√ß√£o gerencial enviada');
    } catch (error) {
      console.error('‚ùå Erro ao notificar escala√ß√£o gerencial:', error);
    }
  }

  // üîÑ NOTIFICA SOBRE MUDAN√áA DE STATUS (ATUALIZADO COM PUSH)
  async notifyStatusChange(chamadoId, chamadoData, newStatus, oldStatus, updaterId) {
    try {
      console.log('üîÑ Enviando notifica√ß√£o de mudan√ßa de status...');
      
      const recipients = await this.#getStatusChangeRecipients(chamadoData, updaterId);
      
      const statusNames = {
        'em_tratativa': 'Em Tratativa',
        'executado_aguardando_validacao': 'Executado - Aguardando Valida√ß√£o',
        'concluido': 'Conclu√≠do',
        'aprovado': 'Aprovado',
        'reprovado': 'Reprovado'
      };

      const notificationData = {
        tipo: 'mudanca_status',
        titulo: `Status atualizado: ${chamadoData.titulo}`,
        conteudo: `${statusNames[oldStatus] || oldStatus} ‚Üí ${statusNames[newStatus] || newStatus}`,
        chamadoId: chamadoId,
        atualizadoPor: updaterId,
        metadata: {
          newStatus: newStatus,
          oldStatus: oldStatus,
          statusName: statusNames[newStatus] || newStatus
        }
      };

      await this.#sendNotificationToUsers(recipients, notificationData);
      
      // üöÄ PUSH ESPEC√çFICO PARA MUDAN√áA DE STATUS
      try {
        await fcmBackendService.notifyStatusChange(chamadoId, chamadoData, newStatus, oldStatus, updaterId);
      } catch (pushError) {
        console.error('‚ùå Erro espec√≠fico no push de mudan√ßa de status:', pushError);
      }
      
      console.log('‚úÖ Notifica√ß√£o de mudan√ßa de status enviada');
    } catch (error) {
      console.error('‚ùå Erro ao notificar mudan√ßa de status:', error);
    }
  }

  // üìÖ NOTIFICA SOBRE NOVO EVENTO (ATUALIZADO COM PUSH)
  async notifyNewEvent(eventData, creatorId) {
    try {
      console.log('üìÖ Enviando notifica√ß√£o de novo evento...');
      
      // Buscar todos os usu√°rios ativos (exceto o criador)
      const allUsers = await this.#getAllActiveUsers();
      const recipients = allUsers.filter(userId => userId !== creatorId);
      
      const notificationData = {
        tipo: 'novo_evento',
        titulo: `Novo evento: ${eventData.nome}`,
        conteudo: `Local: ${eventData.local} | Data: ${eventData.dataInicioEvento}`,
        eventoId: eventData.id,
        criadoPor: creatorId,
        metadata: {
          eventName: eventData.nome,
          location: eventData.local,
          startDate: eventData.dataInicioEvento
        }
      };

      await this.#sendNotificationToUsers(recipients, notificationData);
      
      // üöÄ PUSH ESPEC√çFICO PARA NOVO EVENTO
      try {
        await fcmBackendService.notifyNewEvent(eventData, creatorId);
      } catch (pushError) {
        console.error('‚ùå Erro espec√≠fico no push de novo evento:', pushError);
      }
      
      console.log('‚úÖ Notifica√ß√£o de novo evento enviada');
    } catch (error) {
      console.error('‚ùå Erro ao notificar novo evento:', error);
    }
  }

  // üéØ M√âTODOS AUXILIARES PARA BUSCAR DESTINAT√ÅRIOS

  async #getMessageRecipients(chamadoData, senderId) {
    const recipients = new Set();
    
    // Adicionar criador do chamado
    if (chamadoData.criadoPor && chamadoData.criadoPor !== senderId) {
      recipients.add(chamadoData.criadoPor);
    }
    
    // Adicionar consultor e produtor
    if (chamadoData.consultorId && chamadoData.consultorId !== senderId) {
      recipients.add(chamadoData.consultorId);
    }
    if (chamadoData.produtorId && chamadoData.produtorId !== senderId) {
      recipients.add(chamadoData.produtorId);
    }
    
    // Adicionar operadores da √°rea
    if (chamadoData.area) {
      const areaUsers = await this.#getUsersByArea(chamadoData.area);
      areaUsers.forEach(user => {
        if (user.id !== senderId) {
          recipients.add(user.id);
        }
      });
    }
    
    return Array.from(recipients);
  }

  async #getTicketRecipients(chamadoData, creatorId) {
    const recipients = new Set();
    
    // Adicionar consultor e produtor do projeto
    if (chamadoData.consultorId && chamadoData.consultorId !== creatorId) {
      recipients.add(chamadoData.consultorId);
    }
    if (chamadoData.produtorId && chamadoData.produtorId !== creatorId) {
      recipients.add(chamadoData.produtorId);
    }
    
    // Adicionar operadores da √°rea de destino
    if (chamadoData.area) {
      const areaUsers = await this.#getUsersByArea(chamadoData.area);
      areaUsers.forEach(user => {
        if (user.id !== creatorId) {
          recipients.add(user.id);
        }
      });
    }
    
    return Array.from(recipients);
  }

  async #getEscalationRecipients(chamadoData, targetArea) {
    const recipients = new Set();
    
    // Buscar operadores da √°rea de destino
    const areaUsers = await this.#getUsersByArea(targetArea);
    areaUsers.forEach(user => {
      recipients.add(user.id);
    });
    
    return Array.from(recipients);
  }

  async #getStatusChangeRecipients(chamadoData, updaterId) {
    const recipients = new Set();
    
    // Adicionar criador do chamado
    if (chamadoData.criadoPor && chamadoData.criadoPor !== updaterId) {
      recipients.add(chamadoData.criadoPor);
    }
    
    // Adicionar consultor e produtor
    if (chamadoData.consultorId && chamadoData.consultorId !== updaterId) {
      recipients.add(chamadoData.consultorId);
    }
    if (chamadoData.produtorId && chamadoData.produtorId !== updaterId) {
      recipients.add(chamadoData.produtorId);
    }
    
    // Adicionar operadores das √°reas envolvidas
    const areas = [chamadoData.area, chamadoData.areaDeOrigem].filter(Boolean);
    for (const area of areas) {
      const areaUsers = await this.#getUsersByArea(area);
      areaUsers.forEach(user => {
        if (user.id !== updaterId) {
          recipients.add(user.id);
        }
      });
    }
    
    return Array.from(recipients);
  }

  async #getAllActiveUsers() {
    try {
      const usersRef = collection(db, 'usuarios');
      const querySnapshot = await getDocs(usersRef);
      const users = [];
      
      querySnapshot.forEach(doc => {
        users.push(doc.id);
      });
      
      return users;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios ativos:', error);
      return [];
    }
  }

  // üì± M√âTODOS DE GERENCIAMENTO DE TOKENS FCM

  async initializePushNotifications(userId) {
    try {
      console.log('üì± Inicializando notifica√ß√µes push para usu√°rio:', userId);
      
      const token = await pushNotificationService.requestPermissionAndGetToken(userId);
      
      if (token) {
        console.log('‚úÖ Notifica√ß√µes push inicializadas com sucesso');
        return token;
      } else {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel inicializar notifica√ß√µes push');
        return null;
      }
    } catch (error) {
      console.error('‚ùå Erro ao inicializar notifica√ß√µes push:', error);
      return null;
    }
  }

  async testPushNotification(userId) {
    try {
      console.log('üß™ Testando notifica√ß√£o push...');
      
      // Teste local
      const localTest = await pushNotificationService.testNotification();
      
      // Teste via backend
      const backendTest = await fcmBackendService.testNotification(userId);
      
      return { localTest, backendTest };
    } catch (error) {
      console.error('‚ùå Erro no teste de notifica√ß√£o push:', error);
      return { localTest: false, backendTest: false };
    }
  }

  getPushNotificationStatus() {
    return pushNotificationService.getNotificationStatus();
  }

  // üìñ M√âTODOS ORIGINAIS MANTIDOS

  async getUserNotifications(userId, limit = 50) {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('userId', '==', userId),
        orderBy('criadoEm', 'desc')
      );
      
      const querySnapshot = await getDocs(q);
      const notifications = [];
      
      querySnapshot.forEach(doc => {
        notifications.push({
          id: doc.id,
          ...doc.data()
        });
      });
      
      return notifications.slice(0, limit);
    } catch (error) {
      console.error('‚ùå Erro ao buscar notifica√ß√µes:', error);
      return [];
    }
  }

  async markAsRead(notificationId) {
    try {
      const notificationRef = doc(db, 'notifications', notificationId);
      await updateDoc(notificationRef, {
        lida: true,
        lidaEm: new Date()
      });
      console.log('‚úÖ Notifica√ß√£o marcada como lida');
    } catch (error) {
      console.error('‚ùå Erro ao marcar notifica√ß√£o como lida:', error);
    }
  }

  async markTicketNotificationsAsRead(userId, chamadoId) {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('userId', '==', userId),
        where('chamadoId', '==', chamadoId),
        where('lida', '==', false)
      );
      
      const querySnapshot = await getDocs(q);
      const batch = writeBatch(db);
      
      querySnapshot.forEach(doc => {
        batch.update(doc.ref, {
          lida: true,
          lidaEm: new Date()
        });
      });
      
      await batch.commit();
      console.log('‚úÖ Notifica√ß√µes do chamado marcadas como lidas');
    } catch (error) {
      console.error('‚ùå Erro ao marcar notifica√ß√µes do chamado como lidas:', error);
    }
  }

  subscribeToNotifications(userId, callback) {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('userId', '==', userId),
        orderBy('criadoEm', 'desc')
      );
      
      return onSnapshot(q, (querySnapshot) => {
        const notifications = [];
        querySnapshot.forEach(doc => {
          notifications.push({
            id: doc.id,
            ...doc.data()
          });
        });
        
        callback(notifications);
      });
    } catch (error) {
      console.error('‚ùå Erro ao subscrever notifica√ß√µes:', error);
      return () => {}; // Retorna fun√ß√£o vazia para cleanup
    }
  }

  async getUnreadCount(userId) {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('userId', '==', userId),
        where('lida', '==', false)
      );
      
      const querySnapshot = await getDocs(q);
      return querySnapshot.size;
    } catch (error) {
      console.error('‚ùå Erro ao contar notifica√ß√µes n√£o lidas:', error);
      return 0;
    }
  }
}

// üîî INST√ÇNCIA SINGLETON
const notificationService = new NotificationService();

export default notificationService;

